// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/books.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookClient is the client API for Book service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookClient interface {
	Create(ctx context.Context, in *BookInfo, opts ...grpc.CallOption) (*CreateBookResponse, error)
	Delete(ctx context.Context, in *DeleteBookRequestResponse, opts ...grpc.CallOption) (*DeleteBookRequestResponse, error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BookInfoArray, error)
	GetByID(ctx context.Context, in *GetBookRequset, opts ...grpc.CallOption) (*BookInfo, error)
	GetByAuthor(ctx context.Context, in *GetByAuthorRequest, opts ...grpc.CallOption) (*BookInfoArray, error)
	GetByPublisher(ctx context.Context, in *GetByPublisherRequest, opts ...grpc.CallOption) (*BookInfoArray, error)
	GetByGenre(ctx context.Context, in *GetByGenreRequest, opts ...grpc.CallOption) (*BookInfoArray, error)
	GetByLanguage(ctx context.Context, in *GetByLanguageRequest, opts ...grpc.CallOption) (*BookInfoArray, error)
}

type bookClient struct {
	cc grpc.ClientConnInterface
}

func NewBookClient(cc grpc.ClientConnInterface) BookClient {
	return &bookClient{cc}
}

func (c *bookClient) Create(ctx context.Context, in *BookInfo, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, "/proto.Book/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) Delete(ctx context.Context, in *DeleteBookRequestResponse, opts ...grpc.CallOption) (*DeleteBookRequestResponse, error) {
	out := new(DeleteBookRequestResponse)
	err := c.cc.Invoke(ctx, "/proto.Book/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BookInfoArray, error) {
	out := new(BookInfoArray)
	err := c.cc.Invoke(ctx, "/proto.Book/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetByID(ctx context.Context, in *GetBookRequset, opts ...grpc.CallOption) (*BookInfo, error) {
	out := new(BookInfo)
	err := c.cc.Invoke(ctx, "/proto.Book/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetByAuthor(ctx context.Context, in *GetByAuthorRequest, opts ...grpc.CallOption) (*BookInfoArray, error) {
	out := new(BookInfoArray)
	err := c.cc.Invoke(ctx, "/proto.Book/GetByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetByPublisher(ctx context.Context, in *GetByPublisherRequest, opts ...grpc.CallOption) (*BookInfoArray, error) {
	out := new(BookInfoArray)
	err := c.cc.Invoke(ctx, "/proto.Book/GetByPublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetByGenre(ctx context.Context, in *GetByGenreRequest, opts ...grpc.CallOption) (*BookInfoArray, error) {
	out := new(BookInfoArray)
	err := c.cc.Invoke(ctx, "/proto.Book/GetByGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetByLanguage(ctx context.Context, in *GetByLanguageRequest, opts ...grpc.CallOption) (*BookInfoArray, error) {
	out := new(BookInfoArray)
	err := c.cc.Invoke(ctx, "/proto.Book/GetByLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServer is the server API for Book service.
// All implementations must embed UnimplementedBookServer
// for forward compatibility
type BookServer interface {
	Create(context.Context, *BookInfo) (*CreateBookResponse, error)
	Delete(context.Context, *DeleteBookRequestResponse) (*DeleteBookRequestResponse, error)
	GetAll(context.Context, *empty.Empty) (*BookInfoArray, error)
	GetByID(context.Context, *GetBookRequset) (*BookInfo, error)
	GetByAuthor(context.Context, *GetByAuthorRequest) (*BookInfoArray, error)
	GetByPublisher(context.Context, *GetByPublisherRequest) (*BookInfoArray, error)
	GetByGenre(context.Context, *GetByGenreRequest) (*BookInfoArray, error)
	GetByLanguage(context.Context, *GetByLanguageRequest) (*BookInfoArray, error)
	mustEmbedUnimplementedBookServer()
}

// UnimplementedBookServer must be embedded to have forward compatible implementations.
type UnimplementedBookServer struct {
}

func (UnimplementedBookServer) Create(context.Context, *BookInfo) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBookServer) Delete(context.Context, *DeleteBookRequestResponse) (*DeleteBookRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBookServer) GetAll(context.Context, *empty.Empty) (*BookInfoArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBookServer) GetByID(context.Context, *GetBookRequset) (*BookInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedBookServer) GetByAuthor(context.Context, *GetByAuthorRequest) (*BookInfoArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAuthor not implemented")
}
func (UnimplementedBookServer) GetByPublisher(context.Context, *GetByPublisherRequest) (*BookInfoArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPublisher not implemented")
}
func (UnimplementedBookServer) GetByGenre(context.Context, *GetByGenreRequest) (*BookInfoArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGenre not implemented")
}
func (UnimplementedBookServer) GetByLanguage(context.Context, *GetByLanguageRequest) (*BookInfoArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByLanguage not implemented")
}
func (UnimplementedBookServer) mustEmbedUnimplementedBookServer() {}

// UnsafeBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServer will
// result in compilation errors.
type UnsafeBookServer interface {
	mustEmbedUnimplementedBookServer()
}

func RegisterBookServer(s grpc.ServiceRegistrar, srv BookServer) {
	s.RegisterService(&Book_ServiceDesc, srv)
}

func _Book_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Book/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).Create(ctx, req.(*BookInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookRequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Book/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).Delete(ctx, req.(*DeleteBookRequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Book/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Book/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetByID(ctx, req.(*GetBookRequset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Book/GetByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetByAuthor(ctx, req.(*GetByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetByPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetByPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Book/GetByPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetByPublisher(ctx, req.(*GetByPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Book/GetByGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetByGenre(ctx, req.(*GetByGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetByLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetByLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Book/GetByLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetByLanguage(ctx, req.(*GetByLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Book_ServiceDesc is the grpc.ServiceDesc for Book service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Book_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Book",
	HandlerType: (*BookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Book_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Book_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Book_GetAll_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Book_GetByID_Handler,
		},
		{
			MethodName: "GetByAuthor",
			Handler:    _Book_GetByAuthor_Handler,
		},
		{
			MethodName: "GetByPublisher",
			Handler:    _Book_GetByPublisher_Handler,
		},
		{
			MethodName: "GetByGenre",
			Handler:    _Book_GetByGenre_Handler,
		},
		{
			MethodName: "GetByLanguage",
			Handler:    _Book_GetByLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/books.proto",
}
